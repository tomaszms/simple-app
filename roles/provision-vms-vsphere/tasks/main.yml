---
#Deploy OVF file
- name: Deploy OVF file based on Centos golden image stored on Ansible AWX
  vmware_deploy_ovf:
    hostname: '{{ vsphere_host }}'
    username: '{{ vsphere_user }}'
    password: '{{ vsphere_password }}'
    ovf: "/home/centos/centos_golden_image.ovf"
    datastore: '{{ vsphere_datastore }}'
    name: '{{ item.value.vm_hostname }}'
    validate_certs: no
    networks: "{u'VM Network':u'{{ vm_network }}'}"
    wait_for_ip_address: no
    power_on: no
  delegate_to: localhost
  with_dict: "{{ virtual_k8s_nodes }}"



# Deploy a VM based on the OVF file using Ansible 'vmware_guest' module
- name: Deploy VM based on the OVF golden image
  vmware_guest:
    hostname: '{{ vsphere_host }}'
    username: '{{ vsphere_user }}'
    password: '{{ vsphere_password }}'
    validate_certs: no
    folder: "/ha-datacenter/vm"
    name: '{{ item.value.vm_hostname }}'
    guest_id: '{{ vm_guest_id }}'
    force: yes
    annotation: "{{ vm_guest_notes }}"
    disk:
    - size_gb: "{{ item.value.vm_disk_size_gb }}"
      type: thin
      datastore: '{{ vsphere_datastore }}'
    networks:
    - name: '{{ vm_network }}'
      ip: '{{ item.value.vm_management_ip }}'
      netmask: '{{ vm_management_netmask }}'
      gateway: '{{ vm_gateway }}'
      dns_servers:
      - '{{ vm_dns_server }}'
    hardware:
      memory_mb: '{{ item.value.vm_memory_mb }}'
      num_cpus: '{{ item.value.vm_number_vcpus }}'
    customization:
      dns_servers:
      - '{{ vm_dns_server }}'
      domain : '{{ vm_domain_name }}'
      hostname: '{{ item.value.vm_hostname }}'
    wait_for_customization: True
    wait_for_ip_address: yes
    state: present
  delegate_to: localhost
  with_dict: "{{ virtual_k8s_nodes }}"


- name: Power on the master node
  vmware_guest:
    hostname: '{{ vsphere_host }}'
    username: '{{ vsphere_user }}'
    password: '{{ vsphere_password }}'
    validate_certs: no
    folder: "/ha-datacenter/vm"
    name: "{{ virtual_k8s_nodes.master1.vm_hostname }}"
    state: poweredon
    wait_for_ip_address: yes
  delegate_to: localhost


- name: Wait for default IP
  local_action:
    module: wait_for
      host='{{ vm_template_ip }}'
      port=22
      delay=1
      timeout=100

- name: Configure Interface
  template:
    src: "ifcfg-eth-master1.j2"
    dest: "/etc/sysconfig/network-scripts/ifcfg-{{ vm_mgmt_interface }}"
  delegate_to: '{{ vm_template_ip }}'

- name: Restart Networking
  shell: echo 'nameserver {{ vm_dns_server }}' > /etc/resolv.conf & echo '{{ virtual_k8s_nodes.master1.vm_hostname  }}' > /etc/hostname & reboot &
  async: 3
  poll: 0
  delegate_to: '{{ vm_template_ip }}'


- name: Wait for master
  local_action:
    module: wait_for
      host={{ virtual_k8s_nodes.master1.vm_management_ip }}
      port=22
      delay=1
      timeout=100

- name: Power on the worker node 1
  vmware_guest:
    hostname: '{{ vsphere_host }}'
    username: '{{ vsphere_user }}'
    password: '{{ vsphere_password }}'
    validate_certs: no
    folder: "/ha-datacenter/vm"
    name: "{{ virtual_k8s_nodes.worker1.vm_hostname }}"
    state: poweredon
    wait_for_ip_address: yes
  delegate_to: localhost

- name: Wait for default IP
  local_action:
    module: wait_for
      host='{{ vm_template_ip }}'
      port=22
      delay=1
      timeout=100

- name: Configure Interface
  template:
    src: "ifcfg-eth-worker1.j2"
    dest: "/etc/sysconfig/network-scripts/ifcfg-{{ vm_mgmt_interface }}"
  delegate_to: '{{ vm_template_ip }}'

- name: Restart Networking
  shell: "echo >> 'nameserver {{ vm_dns_server }}' > /etc/resolv.conf & echo '{{ virtual_k8s_nodes.worker1.vm_hostname  }}' > /etc/hostname & reboot &"
  async: 3
  poll: 0
  delegate_to: '{{ vm_template_ip }}'


- name: Wait for worker1
  local_action:
    module: wait_for
      host={{ virtual_k8s_nodes.worker1.vm_management_ip }}
      port=22
      delay=1
      timeout=100


- name: Power on the worker node 2
  vmware_guest:
    hostname: '{{ vsphere_host }}'
    username: '{{ vsphere_user }}'
    password: '{{ vsphere_password }}'
    validate_certs: no
    folder: "/ha-datacenter/vm"
    name: "{{ virtual_k8s_nodes.worker2.vm_hostname }}"
    state: poweredon
    wait_for_ip_address: yes
  delegate_to: localhost


- name: Wait for default IP
  local_action:
    module: wait_for
      host='{{ vm_template_ip }}'
      port=22
      delay=1
      timeout=100


- name: Configure Interface
  template:
    src: "ifcfg-eth-worker2.j2"
    dest: "/etc/sysconfig/network-scripts/ifcfg-{{ vm_mgmt_interface }}"
  delegate_to: '{{ vm_template_ip }}'

- name: Restart Networking
  shell: "echo >> 'nameserver {{ vm_dns_server }}' > /etc/resolv.conf & echo '{{ virtual_k8s_nodes.worker2.vm_hostname  }}' > /etc/hostname & reboot &"
  async: 3
  poll: 0
  delegate_to: '{{ vm_template_ip }}'


- name: Wait for worker2
  local_action:
    module: wait_for
      host={{ virtual_k8s_nodes.worker2.vm_management_ip }}
      port=22
      delay=1
      timeout=100



- name: Power on load balancer
  vmware_guest:
    hostname: '{{ vsphere_host }}'
    username: '{{ vsphere_user }}'
    password: '{{ vsphere_password }}'
    validate_certs: no
    folder: "/ha-datacenter/vm"
    name: "{{ virtual_k8s_nodes.loadbalancer1.vm_hostname }}"
    state: poweredon
    wait_for_ip_address: yes
  delegate_to: localhost

- name: Wait for default IP
  local_action:
    module: wait_for
      host='{{ vm_template_ip }}'
      port=22
      delay=1
      timeout=100

- name: Configure Interface
  template:
    src: "ifcfg-eth-loadbalancer1.j2"
    dest: "/etc/sysconfig/network-scripts/ifcfg-{{ vm_mgmt_interface }}"
  delegate_to: '{{ vm_template_ip }}'

- name: Restart Networking
  shell: "echo >> 'nameserver {{ vm_dns_server }}' > /etc/resolv.conf & echo '{{ virtual_k8s_nodes.loadbalancer1.vm_hostname  }}' > /etc/hostname & reboot &"
  async: 3
  poll: 0
  delegate_to: '{{ vm_template_ip }}'


- name: Wait for loadbalancer1
  local_action:
    module: wait_for
      host={{ virtual_k8s_nodes.loadbalancer1.vm_management_ip }}
      port=22
      delay=1
      timeout=100
